Migration Notes
=======

when a new column in added in the Model class, sql needs to know that changes.
this is called migrating.  
can be done in flask migrate

First have to set the Flask app environment variable. 

***set $env:FLASK_APP='myapp.py' for powershell

have to be in the same directory as file when running from cmd, or it;ll say cant find the file 

after settin the flask application, we can do following


flask db init -- which sets the migration directory
(this happens only first)
 
***python -m flask db init***

after making change to database,
flask db migrate -m 'message', sets the migration file
***python -m flask db migrate -m 'message',
flask db upgrade , updates the database with migration

=============
error : sqlalchemy.exc.NoSuchModuleError: Can't load plugin: sqlalchemy.dialects:sqllite
typo : had typed sqllite with double LLs. fixed after.

error : outside context error when app.app_context().push() was not written. 

========
Learn table relationships without confusion. 
============

#flask relationships 2. 

set migration file. 
no changes done so no need to upgrade. 
have to give primary key of parent/kinda table to child tables. 
this works as foreign keys. No 

======
databases in views

create forms in new file

base.html
home/index.html
views to add, list, and delete puppies

create application file, 
import flask, sqlalchemy stuff

set app, configs, 
Models(databse, migrate)

create views, to send html templates back

create forms in a new file 
import forms and use them to push to html and validate on return

do db tasks, create, delete, update and redirect to right url_for view

Learn : why not this?
pup = Puppy.query.get(id)
# pup = db.session.get(Puppy, form.id.data) 

